import telebot
from telebot import types
import time
import math

bot = telebot.TeleBot('5722699716:AAHsHv5KPPst7nLqZ9jPLLU8IgzbiBIcy5M')

# üëâ üôè üëÜ üëá üòÖ üëã üôå ‚ò∫Ô∏è ‚ùó Ô∏è‚ÄºÔ∏è ‚úåÔ∏è üëå ‚úä üë®‚Äçüíª  ü§ñ üòâ  ‚òùÔ∏è ‚ù§Ô∏è üí™ ‚úçÔ∏è üéØ  ‚õî  Ô∏è‚úÖ üìäüìàüßÆ   üó≥Ô∏è




@bot.callback_query_handler(func=lambda call: True)
def step(call):
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)

    if call.data == 'key':
        pass



# region –ö–æ–º–∞–Ω–¥–∞ START
@bot.message_handler(commands=['start'])
def start(message):
    ID = message.chat.id
    bot.send_message(message.chat.id, f'–í–∞—à user ID: `{ID}`', parse_mode='Markdown')

    first_name = message.from_user.first_name
    message_text = f'–ü—Ä–∏–≤–µ—Ç *{first_name}*! –ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?\n–†–∞–¥—ã, —á—Ç–æ —Ç—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã—Ö –¥—Ä–æ–±–µ–π üôè'

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('–°—É–º–º–∞ –¥—Ä–æ–±–µ–π')
    btn2 = types.KeyboardButton('–†–∞–∑–Ω–æ—Å—Ç—å –¥—Ä–æ–±–µ–π')
    btn3 = types.KeyboardButton('–£–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π')
    btn4 = types.KeyboardButton('–î–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π')
    markup.add(btn1, btn2, btn3, btn4)

    bot.send_message(message.chat.id, message_text, parse_mode='Markdown', disable_web_page_preview=True, reply_markup=markup)
# endregion –ö–æ–º–∞–Ω–¥–∞ START




@bot.message_handler(content_types=['text'])
def mess(message):
    get_message_bot = message.text.strip()
    get_message_bot = message.text.lower()

    # region –ö–Ω–æ–ø–∫–∞: –°—É–º–º–∞ –¥—Ä–æ–±–µ–π
    if get_message_bot == "—Å—É–º–º–∞ –¥—Ä–æ–±–µ–π":
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –¥—Ä–æ–±–∏ –∏ –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –Ω–∏–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [a b + m n]')

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            text_message = message.text

            M = [i for i in text_message.split()]

            a = int(M[0])
            b = int(M[1])
            s = M[2]
            m = int(M[3])
            n = int(M[4])

            if s == '+':
                NOK = math.lcm(b, n)

                a = a * (NOK // b)
                m = m * (NOK // n)
                znam = n * (NOK // n)

                bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–±—â–µ–º—É –Ω–∞–∏–º–µ–Ω—å—à–µ–º—É –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é: {a}/{znam} {s} {m}/{znam}')

                bot.send_message(message.chat.id, f'–°–ª–æ–∂–∏–ª–∏ –¥–≤–µ –¥—Ä–æ–±–∏: {a + m}/{znam}')

                cel = (a + m) // znam
                ost = (a + m) % znam

                NOD = math.gcd(ost, znam)

                if cel != 0:
                    bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {cel} ({ost // NOD}/{znam // NOD})')
                else:
                    bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: ({ost // NOD}/{znam // NOD})')
            else:
                bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–∫ +')

        bot.register_next_step_handler(message, message_input)
    # endregion –ö–Ω–æ–ø–∫–∞: –°—É–º–º–∞ –¥—Ä–æ–±–µ–π

    # region –ö–Ω–æ–ø–∫–∞: –†–∞–∑–Ω–æ—Å—Ç—å –¥—Ä–æ–±–µ–π
    elif get_message_bot == "—Ä–∞–∑–Ω–æ—Å—Ç—å –¥—Ä–æ–±–µ–π":
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –¥—Ä–æ–±–∏ –∏ –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –Ω–∏–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [a b - m n]')

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            text_message = message.text

            M = [i for i in text_message.split()]

            a = int(M[0])
            b = int(M[1])
            s = M[2]
            m = int(M[3])
            n = int(M[4])

            if s == '-':
                NOK = math.lcm(b, n)

                a = a * (NOK // b)
                m = m * (NOK // n)
                znam = n * (NOK // n)

                bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–±—â–µ–º—É –Ω–∞–∏–º–µ–Ω—å—à–µ–º—É –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é: {a}/{znam} {s} {m}/{znam}')

                bot.send_message(message.chat.id, f'–í—ã—á–ª–∏ –¥–≤–µ –¥—Ä–æ–±–∏: {a - m}/{znam}')


                if a - m < 0:
                    cel = ((a - m) // znam) + 1
                    ost = - (abs(a - m) % znam)
                else:
                    cel = ((a - m) // znam)
                    ost = (a - m) % znam

                NOD = math.gcd(ost, znam)

                if cel != 0:
                    bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {cel} ({ost // NOD}/{znam // NOD})')
                else:
                    bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: ({ost // NOD}/{znam // NOD})')
            else:
                bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–∫ -')

        bot.register_next_step_handler(message, message_input)
    # endregion –ö–Ω–æ–ø–∫–∞: –†–∞–∑–Ω–æ—Å—Ç—å –¥—Ä–æ–±–µ–π

    # region –ö–Ω–æ–ø–∫–∞: –£–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π
    if get_message_bot == "—É–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π":
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –¥—Ä–æ–±–∏ –∏ –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –Ω–∏–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [a b * m n]')

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            text_message = message.text

            M = [i for i in text_message.split()]

            a = int(M[0])
            b = int(M[1])
            s = M[2]
            m = int(M[3])
            n = int(M[4])

            if s == '*':
                NOK = math.lcm(b, n)

                x = a * m
                znam = b * n


                cel = (x) // znam
                ost = (x) % znam

                NOD = math.gcd(ost, znam)


                bot.send_message(message.chat.id, f'–£–º–Ω–æ–∂–∏–ª–∏ –∏ –¥–≤–µ –¥—Ä–æ–±–∏: {a * m}/{znam}')

                if a * m < 0:
                    cel = ((a * m) // znam) + 1
                    ost = -((a * m) % znam)
                else:
                    cel = (a * m) // znam
                    ost = (a * m) % znam

                NOD = math.gcd(ost, znam)

                if cel != 0:
                    bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {cel} ({ost // NOD}/{znam // NOD})')
                else:
                    bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: ({ost // NOD}/{znam // NOD})')
            else:
                bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–∫ *')

        bot.register_next_step_handler(message, message_input)
    # endregion –ö–Ω–æ–ø–∫–∞: –£–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π

    # region –ö–Ω–æ–ø–∫–∞: –î–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π
    if get_message_bot == "–¥–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π":
        pass
    # endregion –ö–Ω–æ–ø–∫–∞: –î–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π



if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            time.sleep(3)
            print(e)