import telebot
from telebot import types
import time
import datetime
import math
import random
import sqlite3

bot = telebot.TeleBot('5722699716:AAGykIOB_7HtI-xPMD8sI5KHdTYFt9UNdwI')

# üëâ üôè üëÜ üëá üòÖ üëã üôå ‚ò∫Ô∏è ‚ùó Ô∏è‚ÄºÔ∏è ‚úåÔ∏è üëå ‚úä üë®‚Äçüíª  ü§ñ üòâ  ‚òùÔ∏è ‚ù§Ô∏è üí™ ‚úçÔ∏è üéØ  ‚õî  Ô∏è‚úÖ üìäüìàüßÆ   üó≥Ô∏è


#todo: 1. –ü–æ–º–µ–Ω—è—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏–π, –¥–µ–ª–µ–Ω–∏–π –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å —Å—É–º–º–æ–π.
#todo: 2. –ü–æ–º–µ–Ω—è—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ Markdown –≤ –¥–µ–ª–µ–Ω–∏–∏ –∏ —É–º–Ω–æ–∂–µ–Ω–∏–∏
#todo: 3. –§–∏–∫—Å–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑–Ω–æ—Å—Ç–∏
#todo: 4. –ù–∞–ø–∏—Å–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
#todo: 5. –û—Ñ–æ—Ä–º–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É creators, –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥
#todo: 6. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ



@bot.callback_query_handler(func=lambda call: True)
def step(call):
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)

    # region call.data –¥–ª—è –∏–≥—Ä—ã
    if call.data == 'lvl_1':
        M = ['+', '-']
        a = random.randint(1, 10)
        b = random.randint(1, 10)
        s = random.choice(M)
        m = random.randint(1, 10)
        n = random.randint(1, 10)
        bot.send_message(call.message.chat.id, f'–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: `({a}/{b}) {s} ({m}/{n}) = `', parse_mode='Markdown')

        if s == '+':
            NOK = LCM(b, n)

            a = a * (NOK // b)
            m = m * (NOK // n)
            znam = n * (NOK // n)

            r = f'{a + m}/{znam}'

        elif s == '-':
            NOK = LCM(b, n)

            a = a * (NOK // b)
            m = m * (NOK // n)
            znam = n * (NOK // n)

            r = f'{a - m}/{znam}'



        @bot.message_handler(content_types=['text'])
        def message_input(message):
            x = message.text
            Markup = types.InlineKeyboardMarkup(row_width=1)
            Markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë –ø—Ä–∏–º–µ—Ä", callback_data="lvl_1"))
            if x == r:
                bot.send_message(call.message.chat.id, f'–í–µ—Ä–Ω–æ! –°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ üëâ /game', parse_mode='Markdown', reply_markup=Markup)
            else:
                bot.send_message(call.message.chat.id, f'–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ üëâ /game',
                                 parse_mode='Markdown', reply_markup=Markup)

        bot.register_next_step_handler(call.message, message_input)

    if call.data == 'lvl_2':
        M = ['+', '-', '*', '/']
        a = random.randint(1, 25)
        b = random.randint(1, 25)
        s = random.choice(M)
        m = random.randint(1, 25)
        n = random.randint(1, 25)
        bot.send_message(call.message.chat.id, f'–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: `({a}/{b}) {s} ({m}/{n}) = `', parse_mode='Markdown')

        if s == '+':
            NOK = LCM(b, n)

            a = a * (NOK // b)
            m = m * (NOK // n)
            znam = n * (NOK // n)

            r = f'{a + m}/{znam}'

        elif s == '-':
            NOK = LCM(b, n)

            a = a * (NOK // b)
            m = m * (NOK // n)
            znam = n * (NOK // n)

            r = f'{a - m}/{znam}'

        elif s == '*':
            NOK = LCM(b, n)

            x = a * m
            znam = b * n

            cel = (x) // znam
            ost = (x) % znam

            NOD = math.gcd(ost, znam)

            r = f'{a * m}/{znam}'

        elif s == '/':
            NOK = LCM(b, n)

            x = a * n
            znam = b * m

            cel = (x) // znam
            ost = (x) % znam

            NOD = math.gcd(ost, znam)

            r = f'{x}/{znam}'

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            x = message.text
            Markup = types.InlineKeyboardMarkup(row_width=1)
            Markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë –ø—Ä–∏–º–µ—Ä", callback_data="lvl_2"))
            if x == r:
                bot.send_message(call.message.chat.id, f'–í–µ—Ä–Ω–æ! –°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ üëâ /game', parse_mode='Markdown', reply_markup=Markup)
            else:
                bot.send_message(call.message.chat.id, f'–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ üëâ /game',
                                 parse_mode='Markdown', reply_markup=Markup)

        bot.register_next_step_handler(call.message, message_input)

    if call.data == 'lvl_3':
        M = ['+', '-', '*', '/']
        a = random.randint(1, 50)
        b = random.randint(1, 50)
        s = random.choice(M)
        m = random.randint(1, 50)
        n = random.randint(1, 50)
        bot.send_message(call.message.chat.id, f'–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: `({a}/{b}) {s} ({m}/{n}) = `', parse_mode='Markdown')

        if s == '+':
            NOK = LCM(b, n)

            a = a * (NOK // b)
            m = m * (NOK // n)
            znam = n * (NOK // n)

            r = f'{a + m}/{znam}'

        elif s == '-':
            NOK = LCM(b, n)

            a = a * (NOK // b)
            m = m * (NOK // n)
            znam = n * (NOK // n)

            r = f'{a - m}/{znam}'

        elif s == '*':
            NOK = LCM(b, n)

            x = a * m
            znam = b * n

            cel = (x) // znam
            ost = (x) % znam

            NOD = math.gcd(ost, znam)

            r = f'{a * m}/{znam}'

        elif s == '/':
            NOK = LCM(b, n)

            x = a * n
            znam = b * m

            cel = (x) // znam
            ost = (x) % znam

            NOD = math.gcd(ost, znam)

            r = f'{x}/{znam}'

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            x = message.text
            Markup = types.InlineKeyboardMarkup(row_width=1)
            Markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë –ø—Ä–∏–º–µ—Ä", callback_data="lvl_3"))
            if x == r:
                bot.send_message(call.message.chat.id, f'–í–µ—Ä–Ω–æ! –°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ üëâ /game', parse_mode='Markdown', reply_markup=Markup)
            else:
                bot.send_message(call.message.chat.id, f'–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ üëâ /game',
                                 parse_mode='Markdown', reply_markup=Markup)

        bot.register_next_step_handler(call.message, message_input)
    # endregion call.data –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ª–≤–ª-–∞ –∏–≥—Ä—ã



# region –ö–æ–º–∞–Ω–¥–∞ GAME
@bot.message_handler(commands=['game'])
def game(message):
    Markup = types.InlineKeyboardMarkup(row_width=1)
    Markup.add(types.InlineKeyboardButton("–õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å", callback_data="lvl_1"),
               types.InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å", callback_data="lvl_2"),
               types.InlineKeyboardButton("–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", callback_data="lvl_3"))
    bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç—Ä–µ–Ω–∞–∂—ë—Ä –¥–ª—è *—Å—á—ë—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥—Ä–æ–±–µ–π*. \n\n ü§ñ –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤–∏–¥–∞: *a/b*\n\n–ß–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ —á–∏—Å–ª–∞', parse_mode='Markdown', reply_markup=Markup)
# endregion –ö–æ–º–∞–Ω–¥–∞ GAME

# region –ö–æ–º–∞–Ω–¥–∞ CREATORS
@bot.message_handler(commands=['creators'])
def creators(message):
    bot.send_message(message.chat.id, f'–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–∞–º–∏ (student: @yanikam22 and teacher: @ilandroxy) –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π telebot –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π —Ç–µ–æ—Ä–∏–∏ —è–∑—ã–∫–∞ python. ', parse_mode='Markdown')
# endregion –ö–æ–º–∞–Ω–¥–∞ CREATORS

# region –ö–æ–º–∞–Ω–¥–∞ STAT
@bot.message_handler(commands=['stat'])
def stat(message):
    if message.chat.id == 1949653479 or message.chat.id == 1891281816:
        con = sqlite3.connect('my_first.db')
        cur = con.cursor()

        cur.execute(f"SELECT * FROM statistics")
        records = cur.fetchall()
        for row in records:
            message_text = f'id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {row[0]}\n' \
                           f'username: @{row[1]}\n' \
                           f'first_name: {row[2]}\n' \
                           f'last_name: {row[3]}\n' \
                           f'–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {row[4]}\n\n' \
                           f'[–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ](tg://user?id={row[0]})\n\n'
            bot.send_message(message.chat.id, message_text, parse_mode='Markdown')

    else:
        bot.send_message(message.chat.id,'–ü–æ—Ö–æ–∂–µ —É –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @yanikam22', parse_mode='Markdown')

# endregion –ö–æ–º–∞–Ω–¥–∞ STAT

# region –ö–æ–º–∞–Ω–¥–∞ START
@bot.message_handler(commands=['start'])
def start(message):



    ID = message.chat.id
    bot.send_message(message.chat.id, f'–í–∞—à user ID: `{ID}`', parse_mode='Markdown')

    first_name = message.from_user.first_name
    message_text = f'–ü—Ä–∏–≤–µ—Ç *{first_name}*! –ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?\n–†–∞–¥—ã, —á—Ç–æ —Ç—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã—Ö –¥—Ä–æ–±–µ–π üôè\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å [—Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç–µ–æ—Ä–∏—é](https://skysmart.ru/articles/mathematic/obyknovennye-drobi)'

    con = sqlite3.connect('my_first.db')
    cur = con.cursor()

    cur.execute('''
            CREATE TABLE IF NOT EXISTS statistics(
                id INTEGER,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                data TEXT);
            ''')

    cur.execute(f"SELECT * FROM statistics WHERE id = {message.chat.id}")
    records = cur.fetchone()
    d = time.strftime('%c')

    if records is None:
        cur.execute('INSERT INTO statistics VALUES(?, ?, ?, ?, ?);', (message.chat.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name, d))

    else:
        cur.execute(f"DELETE FROM players WHERE id = {message.chat.id}")
        cur.execute('INSERT INTO players VALUES(?, ?, ?, ?, ?);', (message.chat.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name, d))
    con.commit()



    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('–°—É–º–º–∞ –¥—Ä–æ–±–µ–π')
    btn2 = types.KeyboardButton('–†–∞–∑–Ω–æ—Å—Ç—å –¥—Ä–æ–±–µ–π')
    btn3 = types.KeyboardButton('–£–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π')
    btn4 = types.KeyboardButton('–î–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π')
    markup.add(btn1, btn2, btn3, btn4)

    bot.send_message(message.chat.id, message_text, parse_mode='Markdown', disable_web_page_preview=True, reply_markup=markup)
# endregion –ö–æ–º–∞–Ω–¥–∞ START

def LCM(x, y):
    maxi = max(x, y)
    for i in range(maxi, 1000000):
        if i % x == 0 and i % y == 0:
            return i


@bot.message_handler(content_types=['text'])
def mess(message):
    get_message_bot = message.text.strip()
    get_message_bot = get_message_bot.lower()

    # region –ö–Ω–æ–ø–∫–∞: –°—É–º–º–∞ –¥—Ä–æ–±–µ–π
    if get_message_bot == "—Å—É–º–º–∞ –¥—Ä–æ–±–µ–π":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å ‚õî')
        markup.add(btn1)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –¥—Ä–æ–±–∏ –∏ –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –Ω–∏–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `[a/b + m/n]`\n\n–≥–¥–µ:', parse_mode='Markdown', reply_markup=markup)
        pic_1 = open('photo/plus.jpg', 'rb')
        bot.send_photo(message.chat.id, pic_1)

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            if message.text != '–û—Ç–º–µ–Ω–∏—Ç—å ‚õî':
                text_message = message.text
                try:
                    M = [i for i in text_message.replace('/', ' ').split()]

                    a = int(M[0])
                    b = int(M[1])
                    s = M[2]
                    m = int(M[3])
                    n = int(M[4])

                    if s == '+':
                        NOK = LCM(b, n)

                        a = a * (NOK // b)
                        m = m * (NOK // n)
                        znam = n * (NOK // n)

                        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–±—â–µ–º—É –Ω–∞–∏–º–µ–Ω—å—à–µ–º—É –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é: *{a}/{znam} {s} {m}/{znam}*', parse_mode='Markdown')

                        bot.send_message(message.chat.id, f'–°–ª–æ–∂–∏–ª–∏ –¥–≤–µ –¥—Ä–æ–±–∏: *{a + m}/{znam}*', parse_mode='Markdown')

                        cel = (a + m) // znam
                        ost = (a + m) % znam

                        NOD = math.gcd(ost, znam)

                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                        btn1 = types.KeyboardButton('–°—É–º–º–∞ –¥—Ä–æ–±–µ–π')
                        btn2 = types.KeyboardButton('–†–∞–∑–Ω–æ—Å—Ç—å –¥—Ä–æ–±–µ–π')
                        btn3 = types.KeyboardButton('–£–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π')
                        btn4 = types.KeyboardButton('–î–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π')
                        markup.add(btn1, btn2, btn3, btn4)
                        if cel != 0:
                            bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: *{cel} ({ost // NOD}/{znam // NOD})*\n\n', parse_mode='Markdown', reply_markup=markup)
                        else:
                            bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: *({ost // NOD}/{znam // NOD})*', parse_mode='Markdown', reply_markup=markup)
                    else:
                        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–∫ *+*', parse_mode='Markdown')
                except IndexError:
                    bot.send_message(message.chat.id,
                                 f"–í–≤–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤, [–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ](https://ru.stackoverflow.com/questions/1377838/%D0%9F%D0%BE%D1%87%D0%B5%D0%BC%D1%83-%D1%8F-%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B0%D1%8E-%D0%BE%D1%88%D0%B8%D0%B1%D0%BA%D1%83-indexerror-list-index-out-of-range-%D0%B8-%D0%BA%D0%B0%D0%BA-%D0%B5%D0%B5-%D0%B8%D1%81%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D1%82%D1%8C)",
                                 parse_mode="Markdown", disable_web_page_preview=True)
                except ValueError:
                    bot.send_message(message.chat.id, f"–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞,–∑–Ω–∞–∫, –ø–æ—Ç–æ–º –µ—â—ë –¥–≤–∞ —á–∏—Å–ª–∞, [–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ](https://pythonim.ru/osnovy/valueerror-python)", parse_mode="Markdown", disable_web_page_preview=True)
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                btn1 = types.KeyboardButton('–°—É–º–º–∞ –¥—Ä–æ–±–µ–π')
                btn2 = types.KeyboardButton('–†–∞–∑–Ω–æ—Å—Ç—å –¥—Ä–æ–±–µ–π')
                btn3 = types.KeyboardButton('–£–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π')
                btn4 = types.KeyboardButton('–î–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π')
                markup.add(btn1, btn2, btn3, btn4)
                bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup)

        bot.register_next_step_handler(message, message_input)
    # endregion –ö–Ω–æ–ø–∫–∞: –°—É–º–º–∞ –¥—Ä–æ–±–µ–π

    # region –ö–Ω–æ–ø–∫–∞: –†–∞–∑–Ω–æ—Å—Ç—å –¥—Ä–æ–±–µ–π
    if get_message_bot == "—Ä–∞–∑–Ω–æ—Å—Ç—å –¥—Ä–æ–±–µ–π":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å ‚õî')
        markup.add(btn1)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –¥—Ä–æ–±–∏ –∏ –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –Ω–∏–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `[a/b - m/n]`', parse_mode='Markdown',reply_markup=markup)
        pic_2 = open('photo/minus.jpg', 'rb')
        bot.send_photo(message.chat.id, pic_2)


        @bot.message_handler(content_types=['text'])
        def message_input(message):
            if message.text != '–û—Ç–º–µ–Ω–∏—Ç—å ‚õî':
                text_message = message.text
                try:
                    M = [i for i in text_message.replace('/', ' ').split()]

                    a = int(M[0])
                    b = int(M[1])
                    s = M[2]
                    m = int(M[3])
                    n = int(M[4])

                    if s == '-':
                        NOK = LCM(b, n)

                        a = a * (NOK // b)
                        m = m * (NOK // n)
                        znam = n * (NOK // n)

                        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–±—â–µ–º—É –Ω–∞–∏–º–µ–Ω—å—à–µ–º—É –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é: *{a}/{znam} {s} {m}/{znam}*', parse_mode='Markdown')

                        bot.send_message(message.chat.id, f'–í—ã—á–ª–∏ –¥–≤–µ –¥—Ä–æ–±–∏: *{a - m}/{znam}*', parse_mode='Markdown')


                        if a - m < 0:
                            cel = ((a - m) // znam) + 1
                            ost = (abs(a - m) % znam)
                        else:
                            cel = ((a - m) // znam)
                            ost = (a - m) % znam

                        NOD = math.gcd(ost, znam)

                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                        btn1 = types.KeyboardButton('–°—É–º–º–∞ –¥—Ä–æ–±–µ–π')
                        btn2 = types.KeyboardButton('–†–∞–∑–Ω–æ—Å—Ç—å –¥—Ä–æ–±–µ–π')
                        btn3 = types.KeyboardButton('–£–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π')
                        btn4 = types.KeyboardButton('–î–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π')
                        markup.add(btn1, btn2, btn3, btn4)
                        if cel != 0:
                            bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: *{cel} ({ost // NOD}/{znam // NOD})*', parse_mode='Markdown', reply_markup=markup)
                        else:
                            bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: *({ost // NOD}/{znam // NOD})*', parse_mode='Markdown', reply_markup=markup)
                    else:
                        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–∫ *-*', parse_mode='Markdown')
                except IndexError:
                    bot.send_message(message.chat.id,
                                 f"–í–≤–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤, [–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ](https://ru.stackoverflow.com/questions/1377838/%D0%9F%D0%BE%D1%87%D0%B5%D0%BC%D1%83-%D1%8F-%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B0%D1%8E-%D0%BE%D1%88%D0%B8%D0%B1%D0%BA%D1%83-indexerror-list-index-out-of-range-%D0%B8-%D0%BA%D0%B0%D0%BA-%D0%B5%D0%B5-%D0%B8%D1%81%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D1%82%D1%8C)",
                                 parse_mode="Markdown", disable_web_page_preview=True)
                except ValueError:
                    bot.send_message(message.chat.id,
                                     f"–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞,–∑–Ω–∞–∫, –ø–æ—Ç–æ–º –µ—â—ë –¥–≤–∞ —á–∏—Å–ª–∞, [–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ](https://pythonim.ru/osnovy/valueerror-python)",
                                     parse_mode="Markdown", disable_web_page_preview=True)
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                btn1 = types.KeyboardButton('–°—É–º–º–∞ –¥—Ä–æ–±–µ–π')
                btn2 = types.KeyboardButton('–†–∞–∑–Ω–æ—Å—Ç—å –¥—Ä–æ–±–µ–π')
                btn3 = types.KeyboardButton('–£–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π')
                btn4 = types.KeyboardButton('–î–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π')
                markup.add(btn1, btn2, btn3, btn4)
                bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup)

        bot.register_next_step_handler(message, message_input)
    # endregion –ö–Ω–æ–ø–∫–∞: –†–∞–∑–Ω–æ—Å—Ç—å –¥—Ä–æ–±–µ–π

    # region –ö–Ω–æ–ø–∫–∞: –£–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π
    if get_message_bot == "—É–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π":  # –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –¥—Ä–æ–±–∏ –∏ –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –Ω–∏–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [a b * m n]')  # –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        @bot.message_handler(content_types=['text'])  # —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        def message_input(message):  # —Ñ—É–Ω–∫—Ü–∏—è
            text_message = message.text
            try:
                M = [i for i in text_message.split()]

                a = int(M[0])
                b = int(M[1])
                s = M[2]
                m = int(M[3])
                n = int(M[4])

                if s == '*':
                    NOK = LCM(b, n)

                    x = a * m
                    znam = b * n


                    cel = (x) // znam
                    ost = (x) % znam

                    NOD = math.gcd(ost, znam)


                    bot.send_message(message.chat.id, f'–£–º–Ω–æ–∂–∏–ª–∏ –∏ –¥–≤–µ –¥—Ä–æ–±–∏: {a * m}/{znam}')

                    if a * m < 0:
                        cel = ((a * m) // znam) + 1
                        ost = -((a * m) % znam)
                    else:
                        cel = (a * m) // znam
                        ost = (a * m) % znam

                    NOD = math.gcd(ost, znam)

                    if cel != 0:
                        bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {cel} ({ost // NOD}/{znam // NOD})')
                    else:
                        bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: ({ost // NOD}/{znam // NOD})')
                else:
                    bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–∫ *')

            except IndexError:
                bot.send_message(message.chat.id,
                             f"–í–≤–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤, [–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ](https://ru.stackoverflow.com/questions/1377838/%D0%9F%D0%BE%D1%87%D0%B5%D0%BC%D1%83-%D1%8F-%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B0%D1%8E-%D0%BE%D1%88%D0%B8%D0%B1%D0%BA%D1%83-indexerror-list-index-out-of-range-%D0%B8-%D0%BA%D0%B0%D0%BA-%D0%B5%D0%B5-%D0%B8%D1%81%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D1%82%D1%8C)",
                             parse_mode="Markdown", disable_web_page_preview=True)
            except ValueError:
                bot.send_message(message.chat.id,
                                 f"–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞,–∑–Ω–∞–∫, –ø–æ—Ç–æ–º –µ—â—ë –¥–≤–∞ —á–∏—Å–ª–∞, [–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ](https://pythonim.ru/osnovy/valueerror-python)",
                                 parse_mode="Markdown", disable_web_page_preview=True)
        bot.register_next_step_handler(message, message_input)
    # endregion –ö–Ω–æ–ø–∫–∞: –£–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π

    # region –ö–Ω–æ–ø–∫–∞: –î–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π
    if get_message_bot == "–¥–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π":  # –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –¥—Ä–æ–±–∏ –∏ –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –Ω–∏–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [a b / m n]')  # –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        @bot.message_handler(content_types=['text'])  # —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        def message_input(message):  # —Ñ—É–Ω–∫—Ü–∏—è
            text_message = message.text
            try:
                M = [i for i in text_message.split()]

                a = int(M[0])
                b = int(M[1])
                s = M[2]
                m = int(M[3])
                n = int(M[4])

                if s == '/':
                    NOK = LCM(b, n)

                    x = a * n
                    znam = b * m


                    cel = (x) // znam
                    ost = (x) % znam

                    NOD = math.gcd(ost, znam)


                    bot.send_message(message.chat.id, f'–£–º–Ω–æ–∂–∏–ª–∏ –∏ –¥–≤–µ –¥—Ä–æ–±–∏: {x}/{znam}')

                    if x < 0:
                        cel = ((x) // znam) + 1
                        ost = -((x) % znam)
                    else:
                        cel = (x) // znam
                        ost = (x) % znam

                    NOD = math.gcd(ost, znam)

                    if cel != 0:
                        bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {cel} ({ost // NOD}/{znam // NOD})')
                    else:
                        bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: ({ost // NOD}/{znam // NOD})')
                else:
                    bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–∫ *')

            except IndexError:
                bot.send_message(message.chat.id,
                             f"–í–≤–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤, [–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ](https://ru.stackoverflow.com/questions/1377838/%D0%9F%D0%BE%D1%87%D0%B5%D0%BC%D1%83-%D1%8F-%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B0%D1%8E-%D0%BE%D1%88%D0%B8%D0%B1%D0%BA%D1%83-indexerror-list-index-out-of-range-%D0%B8-%D0%BA%D0%B0%D0%BA-%D0%B5%D0%B5-%D0%B8%D1%81%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D1%82%D1%8C)",
                             parse_mode="Markdown", disable_web_page_preview=True)
            except ValueError:
                bot.send_message(message.chat.id,
                                 f"–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞,–∑–Ω–∞–∫, –ø–æ—Ç–æ–º –µ—â—ë –¥–≤–∞ —á–∏—Å–ª–∞, [–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ](https://pythonim.ru/osnovy/valueerror-python)",
                                 parse_mode="Markdown", disable_web_page_preview=True)

        bot.register_next_step_handler(message, message_input)
    # endregion –ö–Ω–æ–ø–∫–∞: –î–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π

    # region –ö–Ω–æ–ø–∫–∞: –û—Ç–º–µ–Ω–∏—Ç—å ‚õî
    elif get_message_bot == '–æ—Ç–º–µ–Ω–∏—Ç—å ‚õî':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton('–°—É–º–º–∞ –¥—Ä–æ–±–µ–π')
        btn2 = types.KeyboardButton('–†–∞–∑–Ω–æ—Å—Ç—å –¥—Ä–æ–±–µ–π')
        btn3 = types.KeyboardButton('–£–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π')
        btn4 = types.KeyboardButton('–î–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π')
        markup.add(btn1, btn2, btn3, btn4)

        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.', parse_mode='Markdown', disable_web_page_preview=True, reply_markup=markup)
    # endregion: –ö–Ω–æ–ø–∫–∞: –û—Ç–º–µ–Ω–∏—Ç—å ‚õî

if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            time.sleep(3)
            print(e)